{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/build-your-own-primitives-with-value-objects/","result":{"data":{"markdownRemark":{"id":"5d6553a2-d2ff-5824-b229-63704c9f9fa5","html":"<blockquote>\n<p>A small simple object, like money or a date range, whose equality isn’t based on identity. - <a href=\"https://martinfowler.com/eaaCatalog/valueObject.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Martin Fowler</a></p>\n</blockquote>\n<p>I like to think of this as a way to build our own primitive types.</p>\n<h2 id=\"problem\"><a href=\"#problem\" aria-label=\"problem permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problem</h2>\n<p>Primitive types can be too generic and can hold any value of that type but the specifics of our code might not allow for ALL values of that type.</p>\n<h2 id=\"example\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h2>\n<p>First, lets talk about books and some of the properties of a book. A book can have a title, an author, publish year, publisher, chapters, a page count, and probably many other things. A simple class definition for a book might look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span>\n<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> Title <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">string</span> Author <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> PublishYear <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> PageCount <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This looks useful for defining our book but we immediately start running into issues when we start trying to use it for anything, like add/update:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> List<span class=\"token operator\">&lt;</span>Book<span class=\"token operator\">></span> _bookCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    _bookCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span> Title <span class=\"token operator\">=</span> <span class=\"token string\">\"IT\"</span><span class=\"token punctuation\">,</span> Author <span class=\"token operator\">=</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> PublishYear <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> PageCount <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _bookCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Book</span> <span class=\"token punctuation\">{</span> Title <span class=\"token operator\">=</span> <span class=\"token string\">\"The Winds of Winter\"</span><span class=\"token punctuation\">,</span> Author <span class=\"token operator\">=</span> <span class=\"token string\">\"George R. R. Martin\"</span><span class=\"token punctuation\">,</span> PublishYear <span class=\"token operator\">=</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">,</span> PageCount <span class=\"token operator\">=</span> <span class=\"token number\">1200085410</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    _bookCollection<span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>$<span class=\"token string\">\"{b.Title} ({b.PublishYear})...{b.PageCount}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>WTF?!?!?!</strong> How can a book have negative pages or be published in the future, also -3 <em>WHAT</em>, (C.E., B.C.E., something else). We could go into all of the function that have anything to do with the business logic involved with adding/updating the database and write our logic but then we would have to duplicate everything wherever we are using it, and when we go into update it sometime down the road we are going to forget all the places we have that logic to update (HERE COME THE BUGS). Instead we could use a <code class=\"language-text\">ValueObject</code> to isolate all of that logic to one place and always ensure that it is run correctly.</p>\n<h2 id=\"solution\"><a href=\"#solution\" aria-label=\"solution permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution</h2>\n<p>A <code class=\"language-text\">ValueObject</code> is just a small class that allows us to define our own primitive types in code, like making smart ints.</p>\n<p>Let’s start with PageCount and what makes an integer not a good choice.</p>\n<ul>\n<li>Page counts cannot be negative, or zero.</li>\n<li>Math on page count isn’t useful. <em>I can’t add PageCounts together to get a longer book, well maybe that’s crazy.</em></li>\n<li>The longest book ever written is not anywhere close to <code class=\"language-text\">int.MaxValue</code> so we can put some meaningful max on this as well.</li>\n</ul>\n<h3 id=\"our-new-value-object\"><a href=\"#our-new-value-object\" aria-label=\"our new value object permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Our new value object</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PageCount</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">PageCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">value</span> <span class=\"token operator\">></span> <span class=\"token number\">50000</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidPageCountException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Value <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">string</span> <span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> $<span class=\"token string\">\"{Value} pages\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">PageCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PageCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, we can go into our book object and update the <code class=\"language-text\">PageCount</code> property to be of type <code class=\"language-text\">PageCount</code> and KA-BLAMO everywhere that was updating PageCount has logic on the value.</p>\n<p><strong>NOTE</strong> because of the way this is implemented we will begin throwing exceptions when we have an invalid page count, if the system doesn’t handle errors well in all situations you may be causing unknown side effects. If this is the case you should still use value objects but probably not implicitly convert to them, making it easier to find all the use cases for refactoring.</p>\n<h3 id=\"closing\"><a href=\"#closing\" aria-label=\"closing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closing</h3>\n<p>Tired of reading me butcher what a value object is and how to use it? Check out these awesome references:</p>\n<ul>\n<li><a href=\"http://www.weeklydevtips.com/012\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Weekly Dev Tips - Primitive Obsession</a></li>\n<li><a href=\"https://hackernoon.com/value-objects-like-a-pro-f1bfc1548c72\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Value Objects Like a Pro</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/microservice-ddd-cqrs-patterns/implement-value-objects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Implement value objects</a></li>\n<li><a href=\"https://lostechies.com/jimmybogard/2007/12/03/dealing-with-primitive-obsession/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dealing with primitive obsession</a></li>\n<li><a href=\"http://blog.ploeh.dk/2015/01/19/from-primitive-obsession-to-domain-modelling/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">From Primitive Obsession to Domain Modelling</a></li>\n</ul>\n<p>Check out the <a href=\"https://github.com/timscriv/value-objects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Repo</a> that accompanies this post for more examples and work.</p>\n<p>I hope you found this useful and will help you solve more problems!</p>","fields":{"slug":"/posts/build-your-own-primitives-with-value-objects/","tagSlugs":["/tag/clean-architecture/","/tag/architecture/","/tag/net-core/","/tag/c-sharp/"]},"frontmatter":{"date":"2018-11-25T12:00:00.000Z","description":"Value objects are simple objects that give us a powerful tool for building more SOLID software and let us build our own primitive types, specially designed for our needs.","tags":["Clean Architecture","Architecture",".NET Core","CSharp"],"title":"Build Your Own Primitives with Value Objects","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/build-your-own-primitives-with-value-objects/"}}}